Hey Jing


I hope you had a great holiday weekend. Keep an eye out for an email from our coordinator who will help get this set.  Our emails sometimes end up in spam so please check if you don’t see anything come through.  



Here are some hints and tips to help you prepare for your Hangout call.  I know this is a ton of information, but many of the candidates I have worked with have said this material was extremely useful in preparing for our interviews.



PLEASE NOTE: You’ll need a computer with Internet access and a reliable Wifi connection for this video interview so that you can do some coding exercises with your interviewer via Hackerrank. The coordination team will share this link with you once your interview has been confirmed. I would recommend you find a place where you will be able to concentrate and not be disturbed for approximately one hour. 



During your interviews you will be asked (likely more than once): “Why Snapchat/Bitmoji?” Take some time to think about what you like about the space and product and what skills you could bring to the team and organization as a whole. Our team is passionate about the product and is always looking for ways to improve. 



Interview Tips:

Please use your preferred language that you feel strongest coding in. 



Preparation Topics:

Coding: You should know at least one programming language really well. You will be expected to write code in at least some of your interviews.



Sorting: Know how to sort. Don't do bubble-sort. You should know the details of at least one n*log(n) sorting algorithm, preferably two (say, quicksort and merge sort). Merge sort can be highly useful in situations where quick sort is impractical, so take a look at it.



Hash Tables: One of the most important data structures, absolutely know how they work! Be able to implement one using only arrays in your favorite language, in roughly the space of one interview.



Trees: Know about trees; basic tree construction, traversal and manipulation algorithms. Familiarize yourself with binary trees, n-ary trees, and trie-trees. Be familiar with at least one type of balanced binary tree, whether it's a red/black tree, a splay tree or an AVL tree, and know how it's implemented. Understand tree traversal Algorithms: BFS and DFS, and know the difference between inorder, postorder and preorder.



Graphs: Graphs are very important. There are 3 basic ways to represent a graph in memory (objects and pointers, matrix, and adjacency list); familiarize yourself with each representation and its pros & cons. You should know the basic graph traversal algorithms: breadth-first search and depth-first search. Know their computational complexity, their tradeoffs, and how to implement them in real code. If you get a chance, try to study up on more complex algorithms, such as Dijkstra and A*.



Other Data Structures: You should study up on as many other data structures and algorithms as possible. You should especially know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem, and be able to recognize them when an interviewer asks you them in disguise. Find out what NP-complete means.



System Design: This piece will assess your ability to combine knowledge, theory, experience and judgement toward solving a real-world engineering problem. In other words, can you design policies, processes, procedures, methods, tests, and/or components from ground up



Operating Systems: Know about processes, threads and concurrency issues. Know about locks and mutexes and semaphores and monitors and how they work. Know about deadlock and livelock and how to avoid them. Know what resources a process needs, and a thread needs, and how context switching works, and how it's initiated by the operating system and underlying hardware. Know a little about scheduling. The world is rapidly moving towards multi-core, so know the fundamentals of "modern" concurrency constructs.



Helpful links & Sites:

- leetcode.com - Essential for preparation! Practice with medium and hard Q's.

- interviewing.io - Mock interviews!

- skilledinc.com - Mock interviews!

- www.pramp.com - Mock interviews!

- https://www.hackerrank.com/ - You will use this during your Snap video interview

- http://bigocheatsheet.com/ - Big-O complexities, be sure to review! 

- http://projecteuler.net/ - This site will expose you to programming problems that you would not normally come across in a standard day!



Practice coding from scratch.  No Compilers, IDE's or Frameworks



Visit the website www.topcoder.com  Launch the "Arena" widget and then go to the practice rooms where you can play with the problems in the first/second division as a warm up. I’ve heard that if you can handle the DIV I 250 level questions on TopCoder getting around 220+, then you are in very good shape. These sites will expose you to programming problems that you would not normally come across in a standard day. 



Some Great Books:

The Art of Computer Programming (this will take years to learn, totally worth it)

The Dragon Book (much better than its actual title)

Code Complete

The Pragmatic programmer

Hacker's Delight

Programming Pearls

The Practice of Programming

The 4.4BSD Operating System (great intro to *nix internals)

The TCP/IP Illustrated series



A few last tips: (Almost done)



Talk through your thought process about the questions you are asked. Our engineers are evaluating not only your technical abilities but also how you approach and solve problems.



Ask clarifying questions if you do not understand the problem or need more information. Many of the questions asked are deliberately underspecified because our engineers are looking to see how you engage the problem. In particular, they are looking to see which areas leap to your mind as the most important piece of the technological puzzle you've been presented.



Think about ways to improve the solution you'll present. In many cases, the first answer that springs to mind may not be the most elegant solution and may need some refining. It's definitely worthwhile to talk through your initial thoughts to a question and take time to compose a more efficient solution.



Think out loud, keep things technical. The engineers will give you hints: take a hint! They are there to help you!



Always write compilable code. Mind edge cases. Find bugs in your code. Keep unit testing ideas in mind as you may be asked about this



At the end of the interview feel free to ask any questions to the interviewer (about Snap, their project and role - they like to see people showing an interest).



Snap Inc. is a great place to be and now is the best time to join! Read up on our blog to see what we’re working on. 



Here are some of our latest features:

Snap Games - recently launched high-quality mobile games that allows our users to play with their friends in real-time
Snap Ads - this is the self-service tool that 80+% of the ads you see on Snapchat are built on. 
Snap Originals - We now offer more than 450 premium content channels worldwide.
Latest AR Features - Lens Studio, AR Bar, and Scan are among some of the latest features launched that are pushing the creative limits of AR in Snapchat
Thanks again and keep me posted with any questions!